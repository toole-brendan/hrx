package com.example.handreceipt.ui.screens\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.runtime.livedata.observeAsState\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.unit.dp\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.launch\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.ArrowBack\nimport androidx.compose.material.icons.filled.Warning\nimport androidx.compose.material3.IconButton\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport coil.compose.AsyncImage\nimport coil.request.ImageRequest\nimport com.example.handreceipt.data.model.ReferenceItem\nimport com.example.handreceipt.viewmodels.ReferenceDbUiState\nimport com.example.handreceipt.viewmodels.ReferenceDbViewModel\nimport androidx.compose.material.icons.filled.Add\nimport androidx.compose.material3.FloatingActionButton\nimport androidx.hilt.navigation.compose.hiltViewModel\n\n// Placeholder Data Models (replace with actual models from your domain layer)\ndata class ReferenceCategory(val id: String, val name: String /*, ... */)\ndata class ReferenceItem(\n    val id: String, // Or NSN\n    val nsn: String,\n    val name: String,\n    val description: String\n    /*, ... imageUrl, type, manufacturer */\n)\n\n// Placeholder ViewModel (replace with actual data fetching logic using Hilt/Koin, Repository)\nclass ReferenceDBViewModel : ViewModel() {\n\n    private val _searchQuery = MutableLiveData(\"\")\n    val searchQuery: LiveData<String> = _searchQuery\n\n    private val _isLoading = MutableLiveData(false)\n    val isLoading: LiveData<Boolean> = _isLoading\n\n    private val _categories = MutableLiveData<List<ReferenceCategory>>(emptyList())\n    val categories: LiveData<List<ReferenceCategory>> = _categories\n\n    private val _searchResults = MutableLiveData<List<ReferenceItem>>(emptyList())\n    val searchResults: LiveData<List<ReferenceItem>> = _searchResults\n\n    private val _errorMessage = MutableLiveData<String?>(null)\n    val errorMessage: LiveData<String?> = _errorMessage\n\n    fun onSearchQueryChanged(query: String) {\n        _searchQuery.value = query\n        searchDatabase()\n    }\n\n    private fun searchDatabase() {\n        val query = _searchQuery.value ?: \"\"\n        viewModelScope.launch {\n            _isLoading.value = true\n            _errorMessage.value = null\n            // TODO: Implement actual API call/repository fetch logic\n            println(\"Searching for: $query\")\n            kotlinx.coroutines.delay(500) // Simulate network delay\n\n            try {\n                if (query.isBlank()) {\n                    // Fetch initial categories\n                    _categories.value = listOf(\n                        ReferenceCategory(\"cat1\", \"Weapons\"),\n                        ReferenceCategory(\"cat2\", \"Communications\"),\n                        ReferenceCategory(\"cat3\", \"Optics\")\n                    )\n                    _searchResults.value = emptyList()\n                } else {\n                    // Perform search\n                    val results = listOf(\n                        ReferenceItem(\"item1\", \"1005-01-584-1079\", \"M4A1 Carbine\", \"5.56mm rifle\"),\n                        ReferenceItem(\"item2\", \"5820-01-523-1897\", \"AN/PRC-152\", \"Handheld Radio\")\n                    ).filter {\n                        it.name.contains(query, ignoreCase = true) || it.nsn.contains(query)\n                    }\n                    _searchResults.value = results\n                    _categories.value = emptyList()\n                }\n            } catch (e: Exception) {\n                _errorMessage.value = \"Error fetching data: ${e.localizedMessage}\"\n                _categories.value = emptyList()\n                _searchResults.value = emptyList()\n            } finally {\n                _isLoading.value = false\n            }\n        }\n    }\n\n    init {\n        // Fetch initial data when ViewModel is created\n        searchDatabase()\n    }\n}\n\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun ReferenceDatabaseBrowserScreen(\n    modifier: Modifier = Modifier,\n    viewModel: ReferenceDbViewModel = hiltViewModel(),\n    onItemSelected: (itemId: String) -> Unit\n) {\n    var showingManualSNEntry by remember { mutableStateOf(false) }
\n\n    VStack(modifier = modifier) {\n        if (viewModel.isLoading) {\n            ProgressView(\"Loading Items...\")
                .frame(maxWidth: .infinity, maxHeight: .infinity)\n        } else if (/* ... error handling ... */) {\n            // ... error view ...\n        } else {\n             List { /* ... List content with NavigationLink ... */ }
            .listStyle(PlainListStyle())\n            .refreshable { viewModel.loadReferenceItems() }\n        }\n        Spacer()
    }\n    .navigationTitle(\"Reference Database\")\n    .toolbar {\n         ToolbarItem(placement: .navigationBarTrailing) {\n             Button {\n                 showingManualSNEntry = true\n             } label: {\n                 Image(systemName: \"plus.magnifyingglass\")\n                 Text(\"Enter SN\")\n             }\n         }\n    }\n    .sheet(isPresented: $showingManualSNEntry) { /* ... sheet content ... */ }\n    .onAppear { /* ... load items ... */ }\n}\n\n@Composable\nfun LoadingIndicator() {\n    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n        CircularProgressIndicator()\n    }\n}\n\n@Composable\nfun ErrorState(onRetry: () -> Unit) {\n    Column(\n        modifier = Modifier\n            .fillMaxSize()\n            .padding(16.dp),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n        Icon(\n            imageVector = Icons.Filled.Warning,\n            contentDescription = \"Error\",\n            tint = MaterialTheme.colorScheme.error,\n            modifier = Modifier.size(64.dp)\n        )\n        Spacer(modifier = Modifier.height(16.dp))\n        Text(\n            text = \"Failed to load data.\",\n            style = MaterialTheme.typography.titleMedium,\n            textAlign = TextAlign.Center\n        )\n        Spacer(modifier = Modifier.height(8.dp))\n        Text(\n            text = \"Please check your network connection and try again.\",\n            style = MaterialTheme.typography.bodyMedium,\n            textAlign = TextAlign.Center,\n            color = Color.Gray\n        )\n        Spacer(modifier = Modifier.height(16.dp))\n        Button(onClick = onRetry) {\n            Text(\"Retry\")\n        }\n    }\n}\n\n@Composable\nfun ReferenceItemList(\n    items: List<ReferenceItem>,\n    onItemSelected: (itemId: String) -> Unit\n) {\n    if (items.isEmpty()) {\n        Box(modifier = Modifier.fillMaxSize().padding(16.dp), contentAlignment = Alignment.Center) {\n            Text(\"No reference items found.\", color = Color.Gray)\n        }\n    } else {\n        LazyColumn(\n            modifier = Modifier.fillMaxSize(),\n            contentPadding = PaddingValues(vertical = 8.dp)\n        ) {\n            items(items, key = { it.id.toString() }) {\n                ReferenceItemRow(\n                    item = it,\n                    onClick = { onItemSelected(it.id.toString()) }\n                )\n                Divider(modifier = Modifier.padding(horizontal = 16.dp))\n            }\n        }\n    }\n}\n\n@Composable\nfun ReferenceItemRow(\n    item: ReferenceItem,\n    onClick: () -> Unit\n) {\n    Row(\n        modifier = Modifier\n            .fillMaxWidth()\n            .clickable { onClick() }\n            .padding(horizontal = 16.dp, vertical = 12.dp),\n        verticalAlignment = Alignment.CenterVertically\n    ) {\n        AsyncImage(\n            model = ImageRequest.Builder(LocalContext.current)\n                .data(item.imageUrl)\n                .crossfade(true)\n                .placeholder(R.drawable.ic_placeholder)\n                .error(R.drawable.ic_placeholder)\n                .build(),\n            contentDescription = item.name,\n            modifier = Modifier\n                .size(50.dp)\n                .padding(end = 16.dp),\n            contentScale = ContentScale.Crop\n        )\n        Column(modifier = Modifier.weight(1f)) {\n            Text(item.name, style = MaterialTheme.typography.bodyLarge)\n            Text(\"NSN: ${item.nsn}\", style = MaterialTheme.typography.bodyMedium, color = Color.Gray)\n        }\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun ReferenceItemDetailScreen(\n    item: ReferenceItem,\n    onNavigateBack: () -> Unit\n) {\n    Scaffold(\n        topBar = {\n            TopAppBar(\n                title = { Text(item.name, maxLines = 1) },\n                navigationIcon = {\n                    IconButton(onClick = onNavigateBack) {\n                        Icon(Icons.Filled.ArrowBack, contentDescription = \"Back\")\n                    }\n                }\n            )\n        }\n    ) {\n        paddingValues ->\n        Column(\n            modifier = Modifier\n                .padding(paddingValues)\n                .padding(16.dp)\n                .fillMaxSize()\n        ) {\n            AsyncImage(\n                model = ImageRequest.Builder(LocalContext.current)\n                    .data(item.imageUrl)\n                    .crossfade(true)\n                    .placeholder(R.drawable.ic_placeholder_large)\n                    .error(R.drawable.ic_placeholder_large)\n                    .build(),\n                contentDescription = item.name,\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .height(200.dp)\n                    .padding(bottom = 16.dp),\n                contentScale = ContentScale.Fit\n            )\n            Text(item.name, style = MaterialTheme.typography.headlineMedium)\n            Spacer(modifier = Modifier.height(8.dp))\n            Text(\"NSN: ${item.nsn}\", style = MaterialTheme.typography.titleMedium, color = Color.Gray)\n            Spacer(modifier = Modifier.height(16.dp))\n            item.description?.let {\n                if (it.isNotBlank()) {\n                    Text(\"Description\", style = MaterialTheme.typography.titleSmall)\n                    Text(it, style = MaterialTheme.typography.bodyMedium)\n                    Spacer(modifier = Modifier.height(16.dp))\n                }\n            }\n            item.manufacturer?.let {\n                if (it.isNotBlank()) {\n                    Text(\"Manufacturer\", style = MaterialTheme.typography.titleSmall)\n                    Text(it, style = MaterialTheme.typography.bodyMedium)\n                    Spacer(modifier = Modifier.height(16.dp))\n                }\n            }\n            Spacer(modifier = Modifier.weight(1f))\n        }\n    }\n}\n\n// TODO: Define placeholder drawables (e.g., ic_placeholder.xml, ic_placeholder_large.xml)\n// in your res/drawable directory for Coil.\n// Example ic_placeholder.xml:\n/*\n<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"
    android:width=\"24dp\"
    android:height=\"24dp\"
    android:viewportWidth=\"24\"
    android:viewportHeight=\"24\"
    android:tint=\"?attr/colorControlNormal\">
  <path
      android:fillColor=\"@android:color/darker_gray\"
      android:pathData=\"M19,5v14H5V5h14m0,-2H5c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2V5c0,-1.1 -0.9,-2 -2,-2z"/>
  <path
      android:fillColor=\"@android:color/darker_gray\"
      android:pathData=\"M14.14,11.86l-3,3.87 -2.14,-2.58 -3,3.87L19,19l-4.86,-6.14z"/>
</vector>
*/\n\n// Example Preview (Requires passing mock data or a mock ViewModel)\n/*\n@Preview(showBackground = true)\n@Composable\nfun ReferenceItemListPreview() {\n    val items = List(5) { i ->
        ReferenceItem(\n            id = UUID.randomUUID(),\n            nsn = \"1234-00-123-456$i\",\n            itemName = \"Preview Item $i\",\n            description = \"Description for item $i\",\n            manufacturer = \"Preview Corp\",\n            imageUrl = null\n        )\n    }\n     ReferenceItemList(items = items, onItemSelected = {})
}\n\n@Preview(showBackground = true)\n@Composable\nfun ReferenceItemDetailScreenPreview() {\n     ReferenceItemDetailScreen(\n        item = ReferenceItem(\n            id = UUID.randomUUID(),\n            nsn = \"1234-00-123-4567\",\n            itemName = \"Detailed Preview Item\",\n            description = \"This is a longer description to test wrapping and layout.\",\n            manufacturer = \"Detail Preview Inc.\",\n            imageUrl = null // Add a real URL for image preview\n        ),\n        onNavigateBack = {}
    )
}
*/\n\n 