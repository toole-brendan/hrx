import React, { useState, useEffect, useCallback } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter,
} from '../ui/dialog';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Label } from '../ui/label';
import { Checkbox } from '../ui/checkbox';
import { Separator } from '../ui/separator';
import { Textarea } from '../ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { Mail, Download, FileText, Settings, Building2, CheckCircle, Circle, AlertTriangle, Filter, Loader2,
} from 'lucide-react'; // iOS Components
import { CleanCard, ElegantSectionHeader, StatusBadge, MinimalLoadingView
} from '@/components/ios'; interface Property { id: string; name: string; serialNumber: string; nsn?: string; category: string; status: string; isSensitive?: boolean;
} interface UnitInfo { unitName: string; dodaac: string; stockNumber: string; location: string;
} interface UserInfo { name: string; rank: string; title: string; phone: string;
} interface GeneratePDFRequest { property_ids: string[]; group_by_category: boolean; include_qr_codes: boolean; send_email: boolean; recipients: string[]; from_user: UserInfo; to_user: UserInfo; unit_info: UnitInfo;
} interface DA2062ExportDialogProps { isOpen: boolean; onClose: () => void; selectedProperties?: Property[];
} export const DA2062ExportDialog: React.FC<DA2062ExportDialogProps> = ({ isOpen, onClose, selectedProperties: initialSelectedProperties = [],
}) => { const [properties, setProperties] = useState<Property[]>([]); const [selectedPropertyIds, setSelectedPropertyIds] = useState<Set<string>>( new Set(initialSelectedProperties.map(p => p.id)) ); const [isLoading, setIsLoading] = useState(false); const [isGenerating, setIsGenerating] = useState(false); const [exportMode, setExportMode] = useState<'download' | 'email'>('download'); const [emailRecipients, setEmailRecipients] = useState(''); // Export options const [groupByCategory, setGroupByCategory] = useState(true); const [includeQRCodes, setIncludeQRCodes] = useState(true); // Unit and user info const [unitInfo, setUnitInfo] = useState<UnitInfo>({ unitName: localStorage.getItem('unit_name') || '', dodaac: localStorage.getItem('unit_dodaac') || '', stockNumber: localStorage.getItem('unit_stock_number') || '', location: localStorage.getItem('unit_location') || '', }); const [userInfo, setUserInfo] = useState<UserInfo>({ name: localStorage.getItem('user_name') || '', rank: localStorage.getItem('user_rank') || '', title: localStorage.getItem('user_title') || 'Property Book Officer', phone: localStorage.getItem('user_phone') || '', }); const { toast } = useToast(); // Load user properties useEffect(() => { if (isOpen) { loadProperties(); } }, [isOpen]); const loadProperties = async () => { setIsLoading(true); try { const response = await fetch('/api/property', { headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}`, }, }); if (!response.ok) { throw new Error('Failed to load properties'); } const data = await response.json(); setProperties(data); } catch (error) { toast({ title: 'Error', description: 'Failed to load properties', variant: 'destructive', }); } finally { setIsLoading(false); } }; const togglePropertySelection = useCallback((propertyId: string) => { setSelectedPropertyIds(prev => { const newSet = new Set(prev); if (newSet.has(propertyId)) { newSet.delete(propertyId); } else { newSet.add(propertyId); } return newSet; }); }, []); const selectAll = () => { setSelectedPropertyIds(new Set(properties.map(p => p.id))); }; const clearSelection = () => { setSelectedPropertyIds(new Set()); }; const selectByCategory = (category: string) => { const filtered = properties.filter(p => p.category?.toLowerCase().includes(category.toLowerCase()) ); setSelectedPropertyIds(new Set(filtered.map(p => p.id))); }; const selectSensitiveItems = () => { const sensitiveItems = properties.filter(p => p.isSensitive); setSelectedPropertyIds(new Set(sensitiveItems.map(p => p.id))); }; const generateFormNumber = () => { const date = new Date().toISOString().slice(0, 10).replace(/-/g, ''); const userId = localStorage.getItem('user_id') || '1'; return `HR-${date}-${userId}`; }; const handleGenerate = async () => { if (selectedPropertyIds.size === 0) { toast({ title: 'No Properties Selected', description: 'Please select at least one property to export.', variant: 'destructive', }); return; } if (exportMode === 'email' && !emailRecipients.trim()) { toast({ title: 'No Recipients', description: 'Please enter email recipients.', variant: 'destructive', }); return; } setIsGenerating(true); const request: GeneratePDFRequest = { property_ids: Array.from(selectedPropertyIds), group_by_category: groupByCategory, include_qr_codes: includeQRCodes, send_email: exportMode === 'email', recipients: exportMode === 'email' ? emailRecipients.split(',').map(r => r.trim()).filter(r => r.length > 0) : [], from_user: userInfo, to_user: userInfo, unit_info: unitInfo, }; try { const response = await fetch('/api/da2062/generate-pdf', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${localStorage.getItem('token')}`, }, body: JSON.stringify(request), }); if (!response.ok) { const errorData = await response.json(); throw new Error(errorData.error || 'Failed to generate PDF'); } if (exportMode === 'email') { // Email sent successfully const result = await response.json(); toast({ title: 'Email Sent', description: `DA 2062 sent successfully to ${result.recipients?.length || 0} recipient(s)`, }); onClose(); } else { // Download PDF const blob = await response.blob(); const url = window.URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `DA2062_${generateFormNumber()}.pdf`; document.body.appendChild(a); a.click(); window.URL.revokeObjectURL(url); document.body.removeChild(a); toast({ title: 'PDF Generated', description: 'DA 2062 downloaded successfully', }); onClose(); } } catch (error) { toast({ title: 'Error', description: error instanceof Error ? error.message : 'Failed to generate PDF', variant: 'destructive', }); } finally { setIsGenerating(false); } }; const selectedCount = selectedPropertyIds.size; return ( <Dialog open={isOpen} onOpenChange={onClose}> <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto bg-app-background"> <DialogHeader> <DialogTitle className="flex items-center gap-2 text-primary-text"> <FileText className="h-5 w-5" /> Export DA 2062 Hand Receipt </DialogTitle> </DialogHeader> <div className="space-y-6"> {/* Unit Information */} <CleanCard> <div className="mb-4"> <ElegantSectionHeader title="UNIT INFORMATION" size="sm" subtitle="Organization details" /> </div> <div className="grid grid-cols-2 gap-4"> <div> <Label htmlFor="unitName" className="text-tertiary-text text-xs uppercase tracking-wide font-medium">Unit Name</Label> <Input id="unitName" value={unitInfo.unitName} onChange={(e) => setUnitInfo(prev => ({ ...prev, unitName: e.target.value }))} className="border-0 border-b border-ios-border rounded-none px-0 py-2 text-base text-primary-text placeholder:text-quaternary-text focus:border-primary-text focus:border-b-2 transition-all duration-200 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0" /> </div> <div> <Label htmlFor="dodaac" className="text-tertiary-text text-xs uppercase tracking-wide font-medium">DODAAC</Label> <Input id="dodaac" value={unitInfo.dodaac} onChange={(e) => setUnitInfo(prev => ({ ...prev, dodaac: e.target.value }))} className="border-0 border-b border-ios-border rounded-none px-0 py-2 text-base text-primary-text placeholder:text-quaternary-text focus:border-primary-text focus:border-b-2 transition-all duration-200 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0" /> </div> <div> <Label htmlFor="location" className="text-tertiary-text text-xs uppercase tracking-wide font-medium">Location</Label> <Input id="location" value={unitInfo.location} onChange={(e) => setUnitInfo(prev => ({ ...prev, location: e.target.value }))} className="border-0 border-b border-ios-border rounded-none px-0 py-2 text-base text-primary-text placeholder:text-quaternary-text focus:border-primary-text focus:border-b-2 transition-all duration-200 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0" /> </div> <div> <Label htmlFor="stockNumber" className="text-tertiary-text text-xs uppercase tracking-wide font-medium">Stock Number</Label> <Input id="stockNumber" value={unitInfo.stockNumber} onChange={(e) => setUnitInfo(prev => ({ ...prev, stockNumber: e.target.value }))} className="border-0 border-b border-ios-border rounded-none px-0 py-2 text-base text-primary-text placeholder:text-quaternary-text focus:border-primary-text focus:border-b-2 transition-all duration-200 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0" /> </div> </div> </CleanCard> {/* Property Selection */} <CleanCard> <div className="mb-4"> <div className="flex items-center justify-between"> <ElegantSectionHeader title="SELECT PROPERTIES" size="sm" subtitle="Choose items to include" /> <StatusBadge status="pending" size="sm"> {selectedCount} SELECTED </StatusBadge> </div> </div> {/* Quick Actions */} <div className="flex items-center gap-2 mb-4 flex-wrap"> <Button variant="outline" size="sm" onClick={selectAll} className="rounded-none border-ios-border" > Select All </Button> <Button variant="outline" size="sm" onClick={clearSelection} className="rounded-none border-ios-border" > Clear </Button> <div className="h-6 w-px bg-ios-divider" /> <Button variant="outline" size="sm" onClick={() => selectByCategory('weapon')} className="rounded-none border-ios-border" > Weapons Only </Button> <Button variant="outline" size="sm" onClick={() => selectByCategory('equipment')} className="rounded-none border-ios-border" > Equipment Only </Button> <Button variant="outline" size="sm" onClick={selectSensitiveItems} className="rounded-none border-ios-border flex items-center gap-1" > <AlertTriangle className="h-3 w-3" /> Sensitive Items </Button> </div> {/* Property List */} {isLoading ? ( <MinimalLoadingView text="Loading properties..." size="md" className="py-8" /> ) : ( <div className="max-h-64 overflow-y-auto border border-ios-border rounded-none"> {properties.map((property) => ( <div key={property.id} className="flex items-center gap-3 p-3 border-b border-ios-divider last:border-b-0 hover:bg-gray-50 cursor-pointer transition-colors" onClick={() => togglePropertySelection(property.id)} > <Checkbox checked={selectedPropertyIds.has(property.id)} onChange={() => togglePropertySelection(property.id)} className="rounded-none" /> <div className="flex-1 min-w-0"> <div className="font-medium text-sm text-primary-text">{property.name}</div> <div className="text-xs text-secondary-text"> SN: {property.serialNumber} {property.nsn && ` • NSN: ${property.nsn}`} </div> </div> {property.isSensitive && ( <AlertTriangle className="h-4 w-4 text-ios-warning flex-shrink-0" /> )} <StatusBadge status={property.status === 'Operational' ? 'operational' : 'maintenance'} size="sm" /> </div> ))} </div> )} </CleanCard> {/* Export Options */} <CleanCard> <div className="mb-4"> <ElegantSectionHeader title="EXPORT OPTIONS" size="sm" subtitle="Configure output format" /> </div> <div className="space-y-4"> <div className="flex items-center space-x-2"> <Checkbox id="groupByCategory" checked={groupByCategory} onCheckedChange={(checked) => setGroupByCategory(checked === true)} className="rounded-none" /> <Label htmlFor="groupByCategory" className="text-sm text-primary-text font-normal cursor-pointer"> Group by Category </Label> </div> <div className="flex items-center space-x-2"> <Checkbox id="includeQRCodes" checked={includeQRCodes} onCheckedChange={(checked) => setIncludeQRCodes(checked === true)} className="rounded-none" /> <Label htmlFor="includeQRCodes" className="text-sm text-primary-text font-normal cursor-pointer"> Include QR Codes </Label> </div> <div className="h-px bg-ios-divider my-4" /> {/* Export Mode */} <div className="space-y-3"> <Label className="text-tertiary-text text-xs uppercase tracking-wide font-medium">Export Method</Label> <div className="grid grid-cols-2 gap-2"> <Button variant={exportMode === 'download' ? 'default' : 'outline'} onClick={() => setExportMode('download')} className={exportMode === 'download' ? 'bg-primary-text hover:bg-black/90 text-white rounded-none' : 'border-ios-border rounded-none'} > <Download className="h-4 w-4 mr-2" /> Download PDF </Button> <Button variant={exportMode === 'email' ? 'default' : 'outline'} onClick={() => setExportMode('email')} className={exportMode === 'email' ? 'bg-primary-text hover:bg-black/90 text-white rounded-none' : 'border-ios-border rounded-none'} > <Mail className="h-4 w-4 mr-2" /> Email PDF </Button> </div> {exportMode === 'email' && ( <div className="mt-4"> <Label htmlFor="emailRecipients" className="text-tertiary-text text-xs uppercase tracking-wide font-medium"> Email Recipients (comma-separated) </Label> <Textarea id="emailRecipients" value={emailRecipients} onChange={(e) => setEmailRecipients(e.target.value)} placeholder="email1@example.com, email2@example.com" className="mt-2 border-ios-border rounded-none resize-none focus:border-ios-accent focus:ring-0" rows={3} /> </div> )} </div> </div> </CleanCard> </div> <DialogFooter className="gap-2 sm:gap-2"> <Button variant="outline" onClick={onClose} disabled={isGenerating} className="border-ios-border rounded-none" > Cancel </Button> <Button onClick={handleGenerate} disabled={selectedCount === 0 || isGenerating} className="bg-primary-text hover:bg-black/90 text-white rounded-none" > {isGenerating ? ( <> <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Generating... </> ) : exportMode === 'email' ? ( <> <Mail className="mr-2 h-4 w-4" /> Send Email </> ) : ( <> <Download className="mr-2 h-4 w-4" /> Download PDF </> )} </Button> </DialogFooter> </DialogContent> </Dialog> );
}; 