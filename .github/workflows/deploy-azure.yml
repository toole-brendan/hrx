name: Deploy HandReceipt to Azure

on:
  workflow_dispatch:
    inputs:
      deploy_infrastructure:
        description: 'Deploy/Update Azure infrastructure'
        type: boolean
        default: false
      deploy_backend:
        description: 'Deploy backend to Container Apps'
        type: boolean
        default: true
      deploy_frontend:
        description: 'Deploy frontend (if applicable)'
        type: boolean
        default: false
      environment:
        description: 'Deployment environment'
        type: choice
        options:
          - prod
          - staging
          - dev
        default: prod

env:
  # Azure Configuration
  AZURE_RESOURCE_GROUP: handreceipt-${{ github.event.inputs.environment }}-rg
  AZURE_LOCATION: eastus2
  AZURE_BASE_NAME: handreceipt
  AZURE_ENVIRONMENT: ${{ github.event.inputs.environment }}
  AZURE_SUBSCRIPTION_ID: 98b9185a-60b8-4df4-b8a4-73e6d35b176f
  
  # Container Registry
  REGISTRY_NAME: handreceipt${{ github.event.inputs.environment }}acr
  
  # Container Apps
  BACKEND_APP_NAME: handreceipt-backend
  WORKER_APP_NAME: handreceipt-worker
  IMMUDB_APP_NAME: immudb
  CONTAINER_ENVIRONMENT_NAME: handreceipt-${{ github.event.inputs.environment }}-cae

permissions:
  id-token: write
  contents: read

jobs:
  setup:
    name: Setup Azure Environment
    runs-on: ubuntu-latest
    outputs:
      registry_url: ${{ steps.get_registry.outputs.registry_url }}
      resource_group_exists: ${{ steps.check_rg.outputs.exists }}
      infrastructure_exists: ${{ steps.check_infrastructure.outputs.exists }}
      postgres_fqdn: ${{ steps.get_postgres.outputs.fqdn }}
      immudb_internal_url: ${{ steps.get_immudb.outputs.internal_url }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Azure Subscription
        run: |
          az account set --subscription "${{ env.AZURE_SUBSCRIPTION_ID }}"
          az account show

      - name: Check Resource Group
        id: check_rg
        run: |
          if az group exists --name ${{ env.AZURE_RESOURCE_GROUP }}; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ Resource group exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "❌ Resource group does not exist"
          fi

      - name: Check Infrastructure
        id: check_infrastructure
        run: |
          if az containerapp env show --name ${{ env.CONTAINER_ENVIRONMENT_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ Container Apps Environment exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "❌ Container Apps Environment does not exist"
          fi

      - name: Get Container Registry URL
        id: get_registry
        if: steps.check_rg.outputs.exists == 'true'
        run: |
          REGISTRY_URL=$(az acr show \
            --name ${{ env.REGISTRY_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query loginServer \
            --output tsv 2>/dev/null || echo "")
          if [ -n "$REGISTRY_URL" ]; then
            echo "registry_url=$REGISTRY_URL" >> $GITHUB_OUTPUT
            echo "Registry URL: $REGISTRY_URL"
          else
            echo "registry_url=" >> $GITHUB_OUTPUT
            echo "❌ Container Registry not found"
          fi

      - name: Get PostgreSQL FQDN
        id: get_postgres
        if: steps.check_rg.outputs.exists == 'true'
        run: |
          POSTGRES_FQDN=$(az postgres flexible-server show \
            --name ${{ env.AZURE_BASE_NAME }}-${{ env.AZURE_ENVIRONMENT }}-postgres \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query fullyQualifiedDomainName \
            --output tsv 2>/dev/null || echo "")
          echo "fqdn=$POSTGRES_FQDN" >> $GITHUB_OUTPUT
          echo "PostgreSQL FQDN: $POSTGRES_FQDN"

      - name: Get ImmuDB Internal URL
        id: get_immudb
        if: steps.check_infrastructure.outputs.exists == 'true'
        run: |
          IMMUDB_URL=$(az containerapp show \
            --name ${{ env.IMMUDB_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv 2>/dev/null || echo "")
          echo "internal_url=$IMMUDB_URL" >> $GITHUB_OUTPUT
          echo "ImmuDB Internal URL: $IMMUDB_URL"

  deploy-infrastructure:
    name: Deploy Azure Infrastructure
    if: ${{ github.event.inputs.deploy_infrastructure == 'true' }}
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      registry_url: ${{ steps.get_outputs.outputs.registry_url }}
      postgres_fqdn: ${{ steps.get_outputs.outputs.postgres_fqdn }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Azure Subscription
        run: |
          az account set --subscription "${{ env.AZURE_SUBSCRIPTION_ID }}"

      - name: Create Resource Group
        if: needs.setup.outputs.resource_group_exists == 'false'
        run: |
          az group create \
            --name ${{ env.AZURE_RESOURCE_GROUP }} \
            --location ${{ env.AZURE_LOCATION }} \
            --tags Environment=${{ env.AZURE_ENVIRONMENT }} Application=${{ env.AZURE_BASE_NAME }}

      - name: Deploy Infrastructure
        run: |
          cd backend/deployments/azure
          
          az deployment group create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --template-file infrastructure.bicep \
            --parameters \
              environment="${{ env.AZURE_ENVIRONMENT }}" \
              baseName="${{ env.AZURE_BASE_NAME }}" \
              location="${{ env.AZURE_LOCATION }}" \
              postgresAdminPassword="${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
              containerRegistryName="${{ env.REGISTRY_NAME }}" \
            --mode Incremental

      - name: Get Deployment Outputs
        id: get_outputs
        run: |
          # Get Container Registry URL
          REGISTRY_URL=$(az acr show \
            --name ${{ env.REGISTRY_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query loginServer \
            --output tsv)
          echo "registry_url=$REGISTRY_URL" >> $GITHUB_OUTPUT
          
          # Get PostgreSQL FQDN
          POSTGRES_FQDN=$(az postgres flexible-server show \
            --name ${{ env.AZURE_BASE_NAME }}-${{ env.AZURE_ENVIRONMENT }}-postgres \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query fullyQualifiedDomainName \
            --output tsv)
          echo "postgres_fqdn=$POSTGRES_FQDN" >> $GITHUB_OUTPUT

      - name: Configure Key Vault Access
        run: |
          # Get service principal object ID for Key Vault access
          SP_OBJECT_ID=$(az ad sp show --id ${{ secrets.AZURE_CLIENT_ID }} --query id --output tsv)
          KEY_VAULT_NAME="${{ env.AZURE_BASE_NAME }}-${{ env.AZURE_ENVIRONMENT }}-kv"
          
          # Set access policy for the deployment service principal
          az keyvault set-policy \
            --name $KEY_VAULT_NAME \
            --object-id $SP_OBJECT_ID \
            --secret-permissions get list set delete recover backup restore purge

  build-and-push:
    name: Build and Push Docker Images
    if: ${{ github.event.inputs.deploy_backend == 'true' }}
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Azure Subscription
        run: |
          az account set --subscription "${{ env.AZURE_SUBSCRIPTION_ID }}"

      - name: Login to Azure Container Registry
        run: |
          REGISTRY_URL="${{ needs.setup.outputs.registry_url }}"
          if [ -n "$REGISTRY_URL" ]; then
            az acr login --name ${{ env.REGISTRY_NAME }}
          else
            echo "❌ Registry URL not available, skipping login"
            exit 1
          fi

      - name: Fix Go Dependencies
        run: |
          cd backend
          go mod tidy

      - name: Build and Push Backend Image
        run: |
          cd backend
          REGISTRY_URL="${{ needs.setup.outputs.registry_url }}"
          
          # Build for linux/amd64 platform (Azure compatibility)
          docker buildx build \
            --platform linux/amd64 \
            --push \
            -t $REGISTRY_URL/handreceipt-backend:latest \
            -t $REGISTRY_URL/handreceipt-backend:${{ github.sha }} \
            -f Dockerfile .

      - name: Build and Push Worker Image
        run: |
          cd backend
          REGISTRY_URL="${{ needs.setup.outputs.registry_url }}"
          
          # Build worker for linux/amd64 platform
          docker buildx build \
            --platform linux/amd64 \
            --push \
            -t $REGISTRY_URL/handreceipt-worker:latest \
            -t $REGISTRY_URL/handreceipt-worker:${{ github.sha }} \
            -f Dockerfile.worker .

  deploy-backend:
    name: Deploy Backend to Container Apps
    if: ${{ github.event.inputs.deploy_backend == 'true' }}
    needs: [setup, build-and-push]
    # Only depend on infrastructure if it doesn't exist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Azure Subscription
        run: |
          az account set --subscription "${{ env.AZURE_SUBSCRIPTION_ID }}"

      - name: Deploy ImmuDB
        run: |
          # Check if ImmuDB already exists
          if az containerapp show --name ${{ env.IMMUDB_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "✅ ImmuDB already exists, skipping deployment"
          else
            echo "🚀 Deploying ImmuDB..."
            az containerapp create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_ENVIRONMENT_NAME }} \
              --name ${{ env.IMMUDB_APP_NAME }} \
              --image codenotary/immudb:1.4.1 \
              --target-port 3322 \
              --ingress internal \
              --min-replicas 1 \
              --max-replicas 1 \
              --cpu 0.5 \
              --memory 1Gi \
              --env-vars \
                IMMUDB_ADMIN_PASSWORD="${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
                IMMUDB_DATABASE=defaultdb \
                IMMUDB_PORT=3322 \
                IMMUDB_ADDRESS=0.0.0.0 \
                IMMUDB_DIR=/var/lib/immudb \
                IMMUDB_PIDFILE=/var/lib/immudb/immudb.pid \
                IMMUDB_LOGFILE=/var/lib/immudb/immudb.log
          fi

      - name: Wait for ImmuDB
        run: |
          echo "⏳ Waiting for ImmuDB to be ready..."
          sleep 30

      - name: Get ImmuDB Internal URL
        id: get_immudb_url
        run: |
          IMMUDB_URL=$(az containerapp show \
            --name ${{ env.IMMUDB_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)
          echo "immudb_url=$IMMUDB_URL" >> $GITHUB_OUTPUT
          echo "ImmuDB URL: $IMMUDB_URL"

      - name: Deploy Backend API
        run: |
          REGISTRY_URL="${{ needs.setup.outputs.registry_url }}"
          POSTGRES_FQDN="${{ needs.setup.outputs.postgres_fqdn }}"
          IMMUDB_URL="${{ steps.get_immudb_url.outputs.immudb_url }}"
          
          # Get storage account key for connection string
          STORAGE_ACCOUNT_KEY=$(az storage account keys list \
            --account-name ${{ env.AZURE_BASE_NAME }}${{ env.AZURE_ENVIRONMENT }}storage \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "[0].value" \
            --output tsv)
          STORAGE_CONNECTION_STRING="DefaultEndpointsProtocol=https;AccountName=${{ env.AZURE_BASE_NAME }}${{ env.AZURE_ENVIRONMENT }}storage;AccountKey=$STORAGE_ACCOUNT_KEY;EndpointSuffix=core.windows.net"
          
          # Deploy or update Backend API using CLI parameters
          if az containerapp show --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "🔄 Updating existing Backend API..."
            az containerapp update \
              --name ${{ env.BACKEND_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image $REGISTRY_URL/handreceipt-backend:${{ github.sha }} \
              --set-env-vars \
                HANDRECEIPT_DATABASE_HOST="$POSTGRES_FQDN" \
                HANDRECEIPT_DATABASE_USER=hradmin \
                HANDRECEIPT_DATABASE_NAME=handreceipt \
                HANDRECEIPT_DATABASE_PORT=5432 \
                HANDRECEIPT_DATABASE_SSL_MODE=require \
                HANDRECEIPT_DATABASE_PASSWORD=secretref:postgres-password \
                HANDRECEIPT_IMMUDB_ENABLED=true \
                HANDRECEIPT_IMMUDB_HOST="immudb" \
                HANDRECEIPT_IMMUDB_PORT=3322 \
                HANDRECEIPT_IMMUDB_USERNAME=immudb \
                HANDRECEIPT_IMMUDB_PASSWORD=secretref:immudb-password \
                HANDRECEIPT_IMMUDB_DATABASE=defaultdb \
                HANDRECEIPT_SERVER_PORT=8080 \
                HANDRECEIPT_SERVER_ENVIRONMENT=production \
                HANDRECEIPT_STORAGE_TYPE=azure_blob \
                HANDRECEIPT_STORAGE_ACCOUNT_NAME=${{ env.AZURE_BASE_NAME }}${{ env.AZURE_ENVIRONMENT }}storage \
                HANDRECEIPT_STORAGE_CONTAINER_NAME=documents \
                HANDRECEIPT_STORAGE_CONNECTION_STRING=secretref:storage-connection-string \
                HANDRECEIPT_MINIO_ENABLED=false \
                HANDRECEIPT_JWT_SECRET_KEY=secretref:jwt-secret-key \
                HANDRECEIPT_CONFIG_NAME=config.azure
          else
            echo "🚀 Creating new Backend API..."
            az containerapp create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_ENVIRONMENT_NAME }} \
              --name ${{ env.BACKEND_APP_NAME }} \
              --image $REGISTRY_URL/handreceipt-backend:${{ github.sha }} \
              --target-port 8080 \
              --ingress external \
              --min-replicas 1 \
              --max-replicas 3 \
              --cpu 1.0 \
              --memory 2Gi \
              --registry-server $REGISTRY_URL \
              --secrets \
                postgres-password="${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
                immudb-password="${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
                storage-connection-string="$STORAGE_CONNECTION_STRING" \
                jwt-secret-key="9xr/uSKNDqOfSPkVOpujQUW3nzll5ykcT8nzu9W9Cvc=" \
              --env-vars \
                HANDRECEIPT_DATABASE_HOST="$POSTGRES_FQDN" \
                HANDRECEIPT_DATABASE_USER=hradmin \
                HANDRECEIPT_DATABASE_NAME=handreceipt \
                HANDRECEIPT_DATABASE_PORT=5432 \
                HANDRECEIPT_DATABASE_SSL_MODE=require \
                HANDRECEIPT_DATABASE_PASSWORD=secretref:postgres-password \
                HANDRECEIPT_IMMUDB_ENABLED=true \
                HANDRECEIPT_IMMUDB_HOST="immudb" \
                HANDRECEIPT_IMMUDB_PORT=3322 \
                HANDRECEIPT_IMMUDB_USERNAME=immudb \
                HANDRECEIPT_IMMUDB_PASSWORD=secretref:immudb-password \
                HANDRECEIPT_IMMUDB_DATABASE=defaultdb \
                HANDRECEIPT_SERVER_PORT=8080 \
                HANDRECEIPT_SERVER_ENVIRONMENT=production \
                HANDRECEIPT_STORAGE_TYPE=azure_blob \
                HANDRECEIPT_STORAGE_ACCOUNT_NAME=${{ env.AZURE_BASE_NAME }}${{ env.AZURE_ENVIRONMENT }}storage \
                HANDRECEIPT_STORAGE_CONTAINER_NAME=documents \
                HANDRECEIPT_STORAGE_CONNECTION_STRING=secretref:storage-connection-string \
                HANDRECEIPT_MINIO_ENABLED=false \
                HANDRECEIPT_JWT_SECRET_KEY=secretref:jwt-secret-key \
                HANDRECEIPT_CONFIG_NAME=config.azure
          fi

      - name: Deploy Worker
        run: |
          REGISTRY_URL="${{ needs.setup.outputs.registry_url }}"
          POSTGRES_FQDN="${{ needs.setup.outputs.postgres_fqdn }}"
          IMMUDB_URL="${{ steps.get_immudb_url.outputs.immudb_url }}"
          
          # Deploy or update Worker
          if az containerapp show --name ${{ env.WORKER_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} >/dev/null 2>&1; then
            echo "🔄 Updating existing Worker..."
            az containerapp update \
              --name ${{ env.WORKER_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --image $REGISTRY_URL/handreceipt-worker:${{ github.sha }} \
              --set-env-vars \
                HANDRECEIPT_DATABASE_HOST="$POSTGRES_FQDN" \
                HANDRECEIPT_DATABASE_USER=hradmin \
                HANDRECEIPT_DATABASE_NAME=handreceipt \
                HANDRECEIPT_DATABASE_PORT=5432 \
                HANDRECEIPT_DATABASE_SSL_MODE=require \
                HANDRECEIPT_DATABASE_PASSWORD=secretref:postgres-password \
                HANDRECEIPT_IMMUDB_ENABLED=false \
                HANDRECEIPT_SERVER_ENVIRONMENT=development \
                HANDRECEIPT_STORAGE_TYPE=azure_blob \
                HANDRECEIPT_STORAGE_ACCOUNT_NAME=${{ env.AZURE_BASE_NAME }}${{ env.AZURE_ENVIRONMENT }}storage \
                HANDRECEIPT_STORAGE_CONTAINER_NAME=documents \
                HANDRECEIPT_STORAGE_CONNECTION_STRING=secretref:storage-connection-string \
                HANDRECEIPT_MINIO_ENABLED=false \
                HANDRECEIPT_CONFIG_NAME=config.azure
          else
            echo "🚀 Creating new Worker..."
            az containerapp create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_ENVIRONMENT_NAME }} \
              --name ${{ env.WORKER_APP_NAME }} \
              --image $REGISTRY_URL/handreceipt-worker:${{ github.sha }} \
              --min-replicas 1 \
              --max-replicas 2 \
              --cpu 0.5 \
              --memory 1Gi \
              --registry-server $REGISTRY_URL \
              --secrets \
                postgres-password="${{ secrets.POSTGRES_ADMIN_PASSWORD }}" \
                storage-connection-string="$STORAGE_CONNECTION_STRING" \
              --env-vars \
                HANDRECEIPT_DATABASE_HOST="$POSTGRES_FQDN" \
                HANDRECEIPT_DATABASE_USER=hradmin \
                HANDRECEIPT_DATABASE_NAME=handreceipt \
                HANDRECEIPT_DATABASE_PORT=5432 \
                HANDRECEIPT_DATABASE_SSL_MODE=require \
                HANDRECEIPT_DATABASE_PASSWORD=secretref:postgres-password \
                HANDRECEIPT_IMMUDB_ENABLED=false \
                HANDRECEIPT_SERVER_ENVIRONMENT=development \
                HANDRECEIPT_STORAGE_TYPE=azure_blob \
                HANDRECEIPT_STORAGE_ACCOUNT_NAME=${{ env.AZURE_BASE_NAME }}${{ env.AZURE_ENVIRONMENT }}storage \
                HANDRECEIPT_STORAGE_CONTAINER_NAME=documents \
                HANDRECEIPT_STORAGE_CONNECTION_STRING=secretref:storage-connection-string \
                HANDRECEIPT_MINIO_ENABLED=false \
                HANDRECEIPT_CONFIG_NAME=config.azure
          fi

  health-check:
    name: Post-Deployment Health Check
    needs: [deploy-backend]
    if: always() && needs.deploy-backend.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Azure Subscription
        run: |
          az account set --subscription "${{ env.AZURE_SUBSCRIPTION_ID }}"

      - name: Get Backend URL
        id: get_url
        run: |
          BACKEND_URL=$(az containerapp show \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)
          echo "backend_url=https://$BACKEND_URL" >> $GITHUB_OUTPUT
          echo "Backend URL: https://$BACKEND_URL"

      - name: Wait for Deployment
        run: |
          echo "⏳ Waiting 60 seconds for deployment to stabilize..."
          sleep 60

      - name: Test Backend Health
        run: |
          BACKEND_URL="${{ steps.get_url.outputs.backend_url }}"
          echo "🔍 Testing backend health at $BACKEND_URL/health"
          
          for i in {1..10}; do
            if curl -s -f "$BACKEND_URL/health" > /dev/null 2>&1; then
              echo "✅ Backend health check passed"
              RESPONSE=$(curl -s "$BACKEND_URL/health" || echo "No response body")
              echo "Response: $RESPONSE"
              exit 0
            else
              echo "Attempt $i: Backend health check failed, retrying in 15 seconds..."
              sleep 15
            fi
          done
          
          echo "❌ Backend health check failed after 10 attempts"
          echo "📊 Checking container app status for troubleshooting..."
          
          # Get container app status
          az containerapp show \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "properties.runningStatus"
          
          exit 1

      - name: Check Container Apps Status
        if: failure()
        run: |
          echo "📊 Checking all Container Apps status..."
          
          # Check all container apps
          az containerapp list \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --output table
          
          # Get recent logs from backend
          echo "Recent Backend API logs:"
          az containerapp logs show \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --tail 100 || echo "Could not retrieve logs"

  notify:
    name: Deployment Notification
    needs: [health-check]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get Backend URL
        id: get_url
        if: needs.health-check.result == 'success'
        run: |
          BACKEND_URL=$(az containerapp show \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)
          echo "backend_url=https://$BACKEND_URL" >> $GITHUB_OUTPUT

      - name: Deployment Success
        if: ${{ needs.health-check.result == 'success' }}
        run: |
          echo "🎉 HandReceipt Azure deployment successful!"
          echo "Environment: ${{ env.AZURE_ENVIRONMENT }}"
          echo "Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
          echo "Backend URL: ${{ steps.get_url.outputs.backend_url }}"
          echo ""
          echo "📊 Deployment Summary:"
          echo "✅ ImmuDB: Internal service running"
          echo "✅ Backend API: ${{ steps.get_url.outputs.backend_url }}"
          echo "✅ Worker: Background processing active"
          echo ""
          echo "🔗 Next Steps:"
          echo "1. Test the API endpoints"
          echo "2. Configure custom domain if needed"
          echo "3. Monitor logs and metrics"

      - name: Deployment Failure
        if: ${{ needs.health-check.result == 'failure' }}
        run: |
          echo "❌ HandReceipt Azure deployment failed!"
          echo "Environment: ${{ env.AZURE_ENVIRONMENT }}"
          echo "Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
          echo ""
          echo "🔍 Troubleshooting steps:"
          echo "1. Check Container Apps logs in Azure Portal"
          echo "2. Verify environment variables are set correctly"
          echo "3. Check database connectivity"
          echo "4. Review Key Vault access policies"
          echo ""
          echo "Check the workflow logs above for detailed error information." 