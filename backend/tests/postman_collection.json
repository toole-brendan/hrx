{
  "info": {
    "name": "HandReceipt API Integration Tests",
    "description": "Integration tests for HandReceipt API covering create-sync-transfer-approve scenario",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "cookie",
    "cookie": [
      {
        "key": "session",
        "value": "{{session_cookie}}",
        "domain": "{{base_url}}"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000/api",
      "type": "string"
    },
    {
      "key": "test_user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_property_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_transfer_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('username');",
                  "    pm.collectionVariables.set(\"test_user_id\", jsonData.user.id);",
                  "});",
                  "",
                  "pm.test(\"Session cookie is set\", function () {",
                  "    pm.expect(pm.cookies.has('session')).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"testpass123\"\n}"
            },
            "url": "{{base_url}}/auth/login"
          }
        }
      ]
    },
    {
      "name": "Create Property Flow",
      "item": [
        {
          "name": "Create Property Item",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Property created with correct data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.name).to.eql(\"M4 Carbine\");",
                  "    pm.expect(jsonData.serial_number).to.eql(\"TEST-\" + pm.variables.replaceIn('{{$timestamp}}'));",
                  "    pm.collectionVariables.set(\"test_property_id\", jsonData.id);",
                  "    pm.collectionVariables.set(\"test_serial_number\", jsonData.serial_number);",
                  "});",
                  "",
                  "pm.test(\"Property has immutable ledger entry\", function () {",
                  "    // This would be verified in a separate endpoint",
                  "    pm.expect(pm.response.headers.get(\"X-Ledger-TX-ID\")).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const timestamp = Date.now();",
                  "pm.variables.set(\"timestamp\", timestamp);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"M4 Carbine\",\n    \"serial_number\": \"TEST-{{timestamp}}\",\n    \"description\": \"5.56mm Carbine\",\n    \"current_status\": \"Operational\",\n    \"nsn\": \"1005-01-382-0953\",\n    \"lin\": \"C74940\"\n}"
            },
            "url": "{{base_url}}/inventory"
          }
        },
        {
          "name": "Verify Property Created",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Property exists with correct data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.item.id).to.eql(pm.collectionVariables.get(\"test_property_id\"));",
                  "    pm.expect(jsonData.item.current_status).to.eql(\"Operational\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": "{{base_url}}/inventory/{{test_property_id}}"
          }
        }
      ]
    },
    {
      "name": "Transfer Flow",
      "item": [
        {
          "name": "Get Users for Transfer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Users list returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    // Set target user for transfer",
                  "    if (jsonData.length > 1) {",
                  "        pm.collectionVariables.set(\"target_user_id\", jsonData[1].id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": "{{base_url}}/auth/users"
          }
        },
        {
          "name": "Create Transfer Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 or 200\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Transfer created with pending status\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.status).to.eql(\"pending\");",
                  "    pm.collectionVariables.set(\"test_transfer_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"property_id\": {{test_property_id}},\n    \"target_user_id\": {{target_user_id}}\n}"
            },
            "url": "{{base_url}}/transfers"
          }
        },
        {
          "name": "Approve Transfer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Transfer approved successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"Approved\");",
                  "});",
                  "",
                  "pm.test(\"Ownership transferred\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    // Verify the property ownership has changed",
                  "    pm.expect(jsonData.property.assigned_to_user_id).to.eql(pm.collectionVariables.get(\"target_user_id\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"Approved\"\n}"
            },
            "url": "{{base_url}}/transfers/{{test_transfer_id}}/status"
          }
        }
      ]
    },
    {
      "name": "Verify Ledger",
      "item": [
        {
          "name": "Get Property History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"History contains all events\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.history).to.be.an('array');",
                  "    pm.expect(jsonData.history.length).to.be.at.least(2);",
                  "    ",
                  "    // Should have ITEM_CREATE and TRANSFER_ACCEPT events",
                  "    const eventTypes = jsonData.history.map(e => e.event_type);",
                  "    pm.expect(eventTypes).to.include('ITEM_CREATE');",
                  "    pm.expect(eventTypes).to.include('TRANSFER_ACCEPT');",
                  "});",
                  "",
                  "pm.test(\"Events are immutable with hashes\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    jsonData.history.forEach(event => {",
                  "        pm.expect(event).to.have.property('hash');",
                  "        pm.expect(event).to.have.property('timestamp');",
                  "        pm.expect(event.verified).to.be.true;",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": "{{base_url}}/inventory/history/{{test_serial_number}}"
          }
        }
      ]
    },
    {
      "name": "Cleanup",
      "item": [
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Session cleared\", function () {",
                  "    pm.expect(pm.cookies.has('session')).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "url": "{{base_url}}/auth/logout"
          }
        }
      ]
    }
  ]
} 